workflows:
  ios_release:
    name: iOS Release (Signed + TestFlight)
    instance_type: mac_mini_m2
    max_build_duration: 60
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
      groups:
        # In Codemagic als Gruppe anlegen (z. B. "appstore_connect") und Variablen setzen:
        # APP_STORE_CONNECT_ISSUER_ID
        # APP_STORE_CONNECT_KEY_IDENTIFIER
        # APP_STORE_CONNECT_PRIVATE_KEY     (kompletter .p8-Inhalt)
        # EINES von beidem f√ºr Zertifikate:
        #   CERTIFICATE_PRIVATE_KEY         (RSA PEM)  ODER
        #   IOS_P12_BASE64 + IOS_P12_PASSWORD
        - appstore_connect
      vars:
        BUNDLE_ID: ch.zenyourself.app

    scripts:
      - name: Flutter pub get
        script: flutter pub get

      - name: Verify ASC & cert secrets
        script: |
          set -e
          : "${APP_STORE_CONNECT_ISSUER_ID:?Missing APP_STORE_CONNECT_ISSUER_ID}"
          : "${APP_STORE_CONNECT_KEY_IDENTIFIER:?Missing APP_STORE_CONNECT_KEY_IDENTIFIER}"
          : "${APP_STORE_CONNECT_PRIVATE_KEY:?Missing APP_STORE_CONNECT_PRIVATE_KEY}"
          if [ -n "${CERTIFICATE_PRIVATE_KEY:-}" ]; then
            echo "üîê Using CERTIFICATE_PRIVATE_KEY (RSA PEM)"
          elif [ -n "${IOS_P12_BASE64:-}" ] && [ -n "${IOS_P12_PASSWORD:-}" ]; then
            echo "üîê Using IOS_P12_* (P12)"
          else
            echo "‚ùå Missing certs (RSA or P12)"; exit 2
          fi

      - name: Automatic code signing (fetch & apply)
        script: |
          set -e
          keychain initialize

          if [ -n "${CERTIFICATE_PRIVATE_KEY:-}" ]; then
            app-store-connect fetch-signing-files "$BUNDLE_ID" \
              --type IOS_APP_STORE \
              --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
              --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
              --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
              --certificate-key "$CERTIFICATE_PRIVATE_KEY" \
              --create --verbose
          else
            echo "$IOS_P12_BASE64" | base64 --decode > /tmp/dist.p12
            KEYCHAIN_PATH="$(security default-keychain -d user | tr -d '"')"
            security import /tmp/dist.p12 -P "$IOS_P12_PASSWORD" -A -k "$KEYCHAIN_PATH"
            app-store-connect fetch-signing-files "$BUNDLE_ID" \
              --type IOS_APP_STORE \
              --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
              --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
              --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
              --create --verbose
          fi

          keychain add-certificates
          xcode-project use-profiles --project ios/Runner.xcodeproj

      - name: Debug signing state
        script: |
          set -e
          echo "üîé Code signing identities:"; security find-identity -p codesigning -v || true
          echo "üîé Provisioning profiles:"; ls -l ~/Library/MobileDevice/Provisioning\ Profiles || true

      - name: Create ExportOptions.plist (app-store-connect, automatic)
        script: |
          set -e
          TEAM_ID="${APPLE_TEAM_ID:-${CM_APPLE_TEAM_ID:-${APP_STORE_CONNECT_TEAM_ID:-}}}"
          {
            printf '%s\n' '<?xml version="1.0" encoding="UTF-8"?>'
            printf '%s\n' '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">'
            printf '%s\n' '<plist version="1.0">'
            printf '%s\n' '<dict>'
            printf '%s\n' '  <key>method</key><string>app-store-connect</string>'
            printf '%s\n' '  <key>signingStyle</key><string>automatic</string>'
            printf '%s\n' '  <key>destination</key><string>export</string>'
            printf '%s\n' '  <key>compileBitcode</key><false/>'
            printf '%s\n' '  <key>stripSwiftSymbols</key><true/>'
            if [ -n "$TEAM_ID" ]; then
              printf '  <key>teamID</key><string>%s</string>\n' "$TEAM_ID"
            fi
            printf '%s\n' '</dict>'
            printf '%s\n' '</plist>'
          } > /tmp/ExportOptions.plist
          echo "üìù ExportOptions.plist created."

      - name: Build signed IPA (release)
        script: |
          set -e
          # Eindeutige Buildnummer
          BN="${CM_BUILD_NUMBER:-${BUILD_NUMBER:-$(date +%Y%m%d%H%M)}}"
          flutter build ipa \
            --release \
            --export-options-plist=/tmp/ExportOptions.plist \
            --no-tree-shake-icons \
            --build-name=1.0.$BN \
            --build-number=$BN

      - name: Export from archive (fallback)
        script: |
          set -e
          if ! find build -type f -name "*.ipa" | grep -q .; then
            echo "üì¶ No IPA from flutter build. Exporting from .xcarchive ‚Ä¶"
            ARCHIVE="build/ios/archive/Runner.xcarchive"
            [ -d "$ARCHIVE" ] || { echo "‚ùå Archive not found: $ARCHIVE"; find build -maxdepth 4 -type f -print || true; exit 1; }

            TEAM_ID="${APPLE_TEAM_ID:-${CM_APPLE_TEAM_ID:-${APP_STORE_CONNECT_TEAM_ID:-}}}"
            {
              printf '%s\n' '<?xml version="1.0" encoding="UTF-8"?>'
              printf '%s\n' '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">'
              printf '%s\n' '<plist version="1.0">'
              printf '%s\n' '<dict>'
              printf '%s\n' '  <key>method</key><string>app-store-connect</string>'
              printf '%s\n' '  <key>signingStyle</key><string>automatic</string>'
              printf '%s\n' '  <key>destination</key><string>export</string>'
              printf '%s\n' '  <key>compileBitcode</key><false/>'
              printf '%s\n' '  <key>stripSwiftSymbols</key><true/>'
              if [ -n "$TEAM_ID" ]; then
                printf '  <key>teamID</key><string>%s</string>\n' "$TEAM_ID"
              fi
              printf '%s\n' '</dict>'
              printf '%s\n' '</plist>'
            } > /tmp/ExportOptions.plist

            mkdir -p build/ios/ipa
            /usr/bin/xcodebuild -exportArchive \
              -archivePath "$ARCHIVE" \
              -exportOptionsPlist /tmp/ExportOptions.plist \
              -exportPath build/ios/ipa
          fi

      - name: Verify IPA artifact
        script: |
          set -e
          echo "üîé Searching for IPAs‚Ä¶"
          find build -type f -name "*.ipa" -print

      - name: Upload to TestFlight (primary + fallback)
        script: |
          set -e
          IPA_PATH="$(find build -type f -name '*.ipa' | head -n1)"
          [ -n "$IPA_PATH" ] || { echo "‚ùå No IPA found under build/"; find build -maxdepth 4 -type f -print; exit 1; }

          echo "üöÄ Uploading (primary: Codemagic CLI)‚Ä¶"
          if app-store-connect publish \
              --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
              --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
              --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
              --path "$IPA_PATH" \
              --verbose; then
            echo "‚úÖ Primary upload OK"
          else
            echo "‚ö†Ô∏è  Primary upload failed ‚Äî trying Fastlane fallback‚Ä¶"
            # JSON per printf schreiben (kein Heredoc ‚Üí YAML-sicher)
            {
              printf '{\n'
              printf '  "key_id": "%s",\n'   "$APP_STORE_CONNECT_KEY_IDENTIFIER"
              printf '  "issuer_id": "%s",\n' "$APP_STORE_CONNECT_ISSUER_ID"
              # Multiline p8 sicher in JSON: Zeilenumbr√ºche werden von Fastlane akzeptiert
              printf '  "key": "%s",\n'   "$(printf %s "$APP_STORE_CONNECT_PRIVATE_KEY" | sed ':a;N;$!ba;s/\n/\\n/g')"
              printf '  "in_house": false\n'
              printf '}\n'
            } > /tmp/asc_api_key.json

            if fastlane run upload_to_testflight \
                ipa:"$IPA_PATH" \
                api_key_path:/tmp/asc_api_key.json \
                skip_waiting_for_build_processing:true \
                reject_build_waiting_for_review:true; then
              echo "‚úÖ Fastlane upload OK"
            else
              echo "‚ùå Upload failed via both methods"; exit 1
            fi
          fi

    artifacts:
      - build/**/*.ipa
      - /tmp/xcodebuild_logs/*.log
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - ~/.pub-cache
        - ios/Pods
